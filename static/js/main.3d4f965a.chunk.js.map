{"version":3,"sources":["components/SideMenu/SideMenu.js","components/SearchMenu/SearchMenu.js","components/WeatherCard/WeatherCard.js","components/HightlightCard/HightlightCard.js","utils/api/api.js","assets/imgs/Sad-Cloud.svg","views/Home/Home.js","App.js","reportWebVitals.js","index.js"],"names":["SideMenu","props","useState","weatherConfig","setWeatherConfig","useEffect","className","component","bgcolor","color","display","justifyContent","flexDirection","alignItems","p","pt","variant","onClick","onOpenSearchMenu","Typography","imgUrl","src","Skeleton","width","height","animation","style","mt","temperature","default","situation","date","title","fullDate","local","useStyles","makeStyles","theme","cssLabel","cssOutlinedInput","borderColor","cssFocused","notchedOutline","borderWidth","SearchMenu","open","setOpen","classes","place","setPlace","places","setPlaces","onClose","Drawer","anchor","overflow","pl","pr","root","TextField","label","id","value","onChange","event","target","InputProps","startAdornment","InputAdornment","position","focused","InputLabelProps","onSearchPlaces","List","map","index","ListItem","button","woeid","onClickPlace","ListItemText","primary","ListItemIcon","WeatherCard","textAlign","min","max","HightlightCard","hightlight","setHightlight","setWidth","progress","setProgress","header","LinearProgress","marginTop","axios","create","baseURL","responseType","Home","hightlights","wind","humidity","airPressure","visibility","todayWeather","setTodayWeather","weathers","setWeathers","setHightlights","isSearchMenuOpen","setIsSearchMenuOpen","error","setError","setWeatherOfCurrentLocation","a","getCurrentPosition","getWoeid","coords","latitude","longitude","startWeatherData","setSkeletons","getWeathers","rawWeathers","getFormattedWeathers","todayWeatherAux","shift","hightlightsCardsConfig","getHightlightsCardsConfig","prevState","getWeatherInfoByWoid","weatherRawData","formattedWeathers","consolidated_weather","forEach","rawWeather","img","weather_state_abbr","dateFactory","getFormattedDate","Date","applicable_date","toUTCString","temperatureFactory","Math","floor","the_temp","max_temp","min_temp","hightlightsFactory","wind_speed","air_pressure","weather","weatherFactory","weather_state_name","push","Promise","resolve","reject","navigator","geolocation","lat","long","Api","get","response","data","woid","console","log","defaultTemp","utcDate","dateArray","split","placeName","getPlaceByName","then","prev","SadCloud","paddingBottom","Grid","container","spacing","item","xs","sm","md","lg","mb","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","palette","blue","secondary","main","typography","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.3d4f965a.chunk.js","sourcesContent":["import Box from '@material-ui/core/Box/Box'\r\nimport Button from '@material-ui/core/Button/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useState, useEffect} from 'react'\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport './SideMenu.css'\r\nfunction SideMenu(props){\r\n    const [weatherConfig, setWeatherConfig] = useState(props.weatherConfig)\r\n    useEffect(() => {\r\n        setWeatherConfig(props.weatherConfig)\r\n    }, [props])\r\n    \r\n    const onOpenSearchMenu = () => {\r\n        props.onOpenSearchMenu()\r\n    }\r\n\r\n    return (\r\n        <Box className=\"side-menu-container\" component=\"div\" bgcolor=\"primary.light\" color=\"primary.contrastText\" display=\"flex\" justifyContent=\"space-between\" flexDirection=\"column\">\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                <Box className=\"actions-container\" display=\"flex\" justifyContent=\"space-between\" p={3} pt={2}>\r\n                    <Button variant=\"contained\"  color=\"primary\" onClick={() => {onOpenSearchMenu()}}>\r\n                        <Typography variant=\"button\">\r\n                            Search for places\r\n                        </Typography>\r\n                    </Button>\r\n                </Box>\r\n                <Box className=\"clouds-container\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                    {\r\n                        weatherConfig.imgUrl ?\r\n                        <img className=\"cloud-img\" src={weatherConfig.imgUrl}></img>\r\n                        :\r\n                        <Skeleton variant=\"rect\" width='250px' height='250px' animation=\"wave\"/>\r\n                    }\r\n                </Box>\r\n                <Box style={{width:'80%'}} mt={15}>\r\n                    <Typography variant=\"h1\" component=\"h2\" style={{width:'100%'}}>\r\n                        {weatherConfig.temperature.default ? \r\n                            weatherConfig.temperature.default\r\n                            :\r\n                            <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\" />    \r\n                        }\r\n                    </Typography>\r\n                </Box>\r\n                <Box style={{width:'80%'}} mt={15}>\r\n                    <Typography variant=\"h4\" component=\"h4\" style={{width:'100%'}}>\r\n                        {\r\n                            weatherConfig.situation ? \r\n                            weatherConfig.situation\r\n                            :\r\n                            <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\"></Skeleton>\r\n                        }\r\n                    </Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box display=\"flex\" alignItems=\"center\" flexDirection=\"column\" mt={2}>\r\n                <Box className=\"date-container\" style={{width:'80%'}}>\r\n                    <Typography variant=\"body2\" style={{width:'100%'}}>\r\n                        {\r\n                            weatherConfig.date.title && weatherConfig.date.fullDate ?\r\n                            'today' + ' . ' + weatherConfig.date.fullDate\r\n                            :\r\n                            <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\"></Skeleton>\r\n                        }\r\n                    </Typography>\r\n                </Box>\r\n                <Box style={{width: '80%'}} mt={1}>\r\n                {\r\n                    weatherConfig.local ?\r\n                    <Typography variant=\"body2\" style={{width: '100%'}}>\r\n                    <PlaceIcon></PlaceIcon>{weatherConfig.local}\r\n                    </Typography>\r\n                    :\r\n                    <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\"></Skeleton>\r\n                }\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SideMenu","import Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport {useEffect, useState} from 'react'\r\nimport Button from '@material-ui/core/Button/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport './SearchMenu.css'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cssLabel: {\r\n        color : 'white'\r\n    },  \r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n          borderColor: `white !important`\r\n        },\r\n        color:'white !important'\r\n    },\r\n    cssFocused: {\r\n        color:'white !important'\r\n    },\r\n    notchedOutline: {\r\n        borderWidth: '1px',\r\n        borderColor: 'white !important',\r\n    },\r\n  }));\r\n\r\nfunction SearchMenu(props){\r\n    const [open, setOpen] = useState(props.open)\r\n    const classes = useStyles();\r\n    const [place, setPlace] = useState('')\r\n    const [places, setPlaces] = useState(props.places)\r\n\r\n    useEffect(() => {\r\n        setOpen(props.open)\r\n        setPlaces(props.places)\r\n    }, [props])\r\n\r\n    const onClose = () => {\r\n        setPlace('')\r\n        props.onClose()\r\n    }\r\n\r\n    const onSearchPlaces = () => {\r\n        props.onSearchPlaces(place)\r\n    }\r\n\r\n    const onClickPlace = (woeid) => {\r\n        props.onClickPlace(woeid)\r\n        onClose()\r\n    }   \r\n    \r\n    const handleInputChange = (event) =>{\r\n        setPlace(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Drawer anchor='left' open={props.open} onClose={onClose}>\r\n            <Box className=\"search-menu-container\" style={{overflow:'auto'}} bgcolor=\"primary.dark\" pl={1} pr={1} color=\"primary.contrastText\"  display=\"flex\" flexDirection=\"column\" >\r\n                <Box display=\"flex\" justifyContent=\"flex-end\" mt={1}>\r\n                    <Button classes = {{root: classes.cssLabel}} onClick={() => {onClose()}}>\r\n                        <CloseIcon></CloseIcon>\r\n                    </Button>\r\n                </Box>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" pt={2}>\r\n                    <TextField\r\n                        label=\"search location\"\r\n                        id=\"outlined-start-adornment\"\r\n                        value={place}\r\n                        onChange={handleInputChange}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\"><SearchIcon></SearchIcon></InputAdornment>,\r\n                            classes: {\r\n                                root: classes.cssOutlinedInput,\r\n                                focused: classes.cssFocused,\r\n                                notchedOutline: classes.notchedOutline\r\n                            },\r\n                        }}\r\n                        InputLabelProps={{\r\n                            classes: {\r\n                              root: classes.cssLabel,\r\n                              focused: classes.cssFocused,\r\n                            },\r\n                        }}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <Button variant=\"contained\"  color=\"primary\" onClick={onSearchPlaces}>\r\n                        <Typography variant=\"button\">\r\n                                Search\r\n                        </Typography>\r\n                    </Button>\r\n                </Box>\r\n                <List>\r\n                    {\r\n                        places.map((place, index) => {\r\n                            return <ListItem button={true} key={index} onClick={() => {onClickPlace(place.woeid)}}>\r\n                                        <ListItemText primary={place.title}></ListItemText>\r\n                                        <ListItemIcon className={classes.cssLabel}>\r\n                                            <ArrowRightIcon/>\r\n                                        </ListItemIcon>\r\n                                    </ListItem>\r\n                        })\r\n                    }\r\n                </List>\r\n           </Box>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default SearchMenu","import './WeatherCard.css'\r\nimport Box from '@material-ui/core/Box/Box'\r\nimport Typography from '@material-ui/core/Typography/Typography'\r\nimport { useState, useEffect} from 'react'\r\n\r\nfunction WeatherCard(props){\r\n    const [weatherConfig, setWeatherConfig] = useState(props.weatherConfig)\r\n\r\n    useEffect(() => {\r\n        setWeatherConfig(props.weatherConfig)\r\n    }, [props])\r\n\r\n    return (\r\n        <Box className=\"weather-card\" bgcolor=\"primary.light\">\r\n            <Typography variant=\"body1\" style={{textAlign:\"center\"}}>\r\n               {weatherConfig.date.fullDate}\r\n            </Typography>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className=\"weather-image\">\r\n                <img src={weatherConfig.imgUrl}></img>\r\n            </Box>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" pr={1} pl={1}>\r\n                <Typography variant=\"body2\">\r\n                    {weatherConfig.temperature.min}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                    {weatherConfig.temperature.max}\r\n                </Typography>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default WeatherCard","import './HightlightCard.css'\r\nimport Box from '@material-ui/core/Box/Box'\r\nimport Typography from '@material-ui/core/Typography/Typography'\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { useState, useEffect} from 'react'\r\nfunction  HightlightCard (props){\r\n    const [hightlight, setHightlight] = useState(props.hightlight)\r\n    const [width, setWidth] = useState(props.width)\r\n    const [progress, setProgress] = useState(props.progress)\r\n\r\n    useEffect(() => {\r\n       setHightlight(props.hightlight)\r\n       setWidth(props.width)\r\n       setProgress(props.progress)\r\n    }, [props])\r\n\r\n    return (\r\n        <Box className=\"hightlight-card-container\" bgcolor=\"primary.light\" style={{width:width}} display=\"flex\" flexDirection=\"column\" alignItems=\"center\" p={3}>\r\n            <Typography variant=\"h6\">\r\n                {hightlight.header}\r\n            </Typography>\r\n            <Typography variant=\"h2\">\r\n                {hightlight.title}\r\n            </Typography>\r\n            {\r\n                progress ? \r\n                    <LinearProgress style={{width:'80%', height:'10px',  marginTop:\"8px\"}} variant=\"determinate\" value={progress.value}></LinearProgress>\r\n                : \r\n                ''\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nexport default HightlightCard","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/\",\r\n  responseType: \"json\"\r\n});","export default __webpack_public_path__ + \"static/media/Sad-Cloud.2b469137.svg\";","import './Home.css'\r\nimport Box from '@material-ui/core/Box/Box'\r\nimport SideMenu from '../../components/SideMenu/SideMenu'\r\nimport SearchMenu from '../../components/SearchMenu/SearchMenu'\r\nimport WeatherCard from '../../components/WeatherCard/WeatherCard'\r\nimport HightlightCard from '../../components/HightlightCard/HightlightCard'\r\nimport { useEffect, useState } from 'react'\r\nimport Api from '../../utils/api/api'\r\nimport { Typography } from '@material-ui/core'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport SadCloud from '../../assets/imgs/Sad-Cloud.svg'\r\nfunction Home(){\r\n    const [todayWeather, setTodayWeather] = useState({\r\n        temperature: {\r\n            default:null,\r\n            min: null,\r\n            max: null\r\n        },\r\n        local: null,\r\n        situation: null,\r\n        date: {\r\n            title: null,\r\n            fullDate: null\r\n        },\r\n        imgUrl: null,\r\n        hightlights: {\r\n            wind: null,\r\n            humidity: null,\r\n            airPressure: null,\r\n            visibility: null\r\n        }\r\n    })\r\n    const [weathers, setWeathers] = useState([null,null,null,null,null])\r\n    const [hightlights, setHightlights] = useState([null,null,null,null])\r\n    const [isSearchMenuOpen, setIsSearchMenuOpen] = useState(false)\r\n    const [places, setPlaces] = useState([])\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setWeatherOfCurrentLocation()\r\n    },[])\r\n\r\n    const setWeatherOfCurrentLocation = async () => {\r\n        try{\r\n            const position = await getCurrentPosition()\r\n            const woeid = await getWoeid(position.coords.latitude, position.coords.longitude)\r\n            startWeatherData(woeid)\r\n            setError(false)\r\n        }\r\n        catch(error){\r\n            setError(true)\r\n        }   \r\n    }\r\n\r\n    const startWeatherData = async (woeid) => {\r\n        try{\r\n            setSkeletons()\r\n            const rawWeathers = await getWeathers(woeid)\r\n            const weathers = getFormattedWeathers(rawWeathers)\r\n            const todayWeatherAux = weathers.shift()\r\n            const hightlightsCardsConfig = getHightlightsCardsConfig(todayWeatherAux)\r\n\r\n            setTodayWeather((prevState) => ({...prevState, ...todayWeatherAux}))\r\n            setWeathers((prevState) => (weathers))\r\n            setHightlights((prevState) => (hightlightsCardsConfig))\r\n            setError(false)\r\n        }\r\n        catch(error){\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onOpenSearchMenu = () => {\r\n        setIsSearchMenuOpen(true)\r\n    }\r\n\r\n    const onCloseSearchMenu = () => {\r\n        setIsSearchMenuOpen(false)\r\n        setPlaces([])\r\n    }\r\n\r\n    const getWeathers = async (woeid) => {\r\n        const weatherRawData = await getWeatherInfoByWoid(woeid)\r\n        return weatherRawData\r\n    }\r\n\r\n    const getFormattedWeathers = (rawWeathers) => {\r\n        const formattedWeathers = []\r\n        rawWeathers.consolidated_weather.forEach(rawWeather => {\r\n            const img = `https://www.metaweather.com/static/img/weather/${rawWeather.weather_state_abbr}.svg`\r\n            const date = dateFactory('teste', getFormattedDate(new Date(rawWeather.applicable_date).toUTCString())) \r\n            const temperature = temperatureFactory(Math.floor(rawWeather.the_temp) + '°C', Math.floor(rawWeather.max_temp) + '°C',  Math.floor(rawWeather.min_temp) + '°C')\r\n            const hightlights = hightlightsFactory(Math.floor(rawWeather.wind_speed) + ' mph', {title: rawWeather.humidity + '%', progress: rawWeather.humidity}, Math.floor(rawWeather.air_pressure) + ' mb', Math.floor(rawWeather.visibility) + ' miles')\r\n\r\n            const weather = weatherFactory(\r\n                temperature, \r\n                rawWeathers.title, \r\n                rawWeather.weather_state_name, \r\n                date, \r\n                img,\r\n                hightlights\r\n            )\r\n           formattedWeathers.push(weather)\r\n        })\r\n\r\n        return formattedWeathers\r\n    }\r\n\r\n    const getCurrentPosition = () => {\r\n        return new Promise((resolve, reject) => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        resolve(position)\r\n                    },\r\n                    (error) => {\r\n                        reject(\"Cannot get position\")\r\n                    }\r\n                )\r\n            } \r\n            else {\r\n                reject(\"Cannot get position\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const getWoeid = (lat, long) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const response = await Api.get(`location/search/?lattlong=${lat},${long}`)\r\n                const woeid = response.data[0].woeid\r\n                resolve(woeid)\r\n            }\r\n            catch(error){\r\n                reject(\"Cannot get woid\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const getWeatherInfoByWoid = (woid) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const response = await Api.get(`location/${woid}`)\r\n                resolve(response.data)\r\n            }\r\n            catch(error){\r\n                reject(\"Cannot get location weather info\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const getHightlightsCardsConfig = (todayWeather) => {\r\n        console.log(\"testee\", todayWeather)\r\n        return [\r\n            {\r\n                header:'Wind status',\r\n                progress: null,\r\n                title: todayWeather.hightlights.wind\r\n            },\r\n            {\r\n                header:'Humidity',\r\n                progress: {\r\n                    value: todayWeather.hightlights.humidity.progress\r\n                },\r\n                title: todayWeather.hightlights.humidity.title\r\n            },\r\n            {\r\n                header:'Visibility',\r\n                progress: null,\r\n                title: todayWeather.hightlights.visibility\r\n            },\r\n            {   \r\n                header: 'Air pressure',\r\n                progress: null,\r\n                title: todayWeather.hightlights.airPressure\r\n            }\r\n        ]\r\n    }\r\n\r\n    const weatherFactory = (temperature, local, situation, date, imgUrl, hightlights) => {\r\n        return {\r\n            temperature,\r\n            local,\r\n            situation,\r\n            date,\r\n            imgUrl,\r\n            hightlights\r\n        }\r\n    }\r\n\r\n    const temperatureFactory = (defaultTemp, max, min) => {\r\n        return {\r\n            default: defaultTemp,\r\n            max,\r\n            min\r\n        }\r\n    }\r\n\r\n    const hightlightsFactory = (wind, humidity, airPressure, visibility) => {\r\n        return {\r\n            wind,\r\n            humidity,\r\n            airPressure,\r\n            visibility\r\n        }\r\n    }\r\n\r\n    const dateFactory = (title, fullDate) => {\r\n        return {\r\n            title,\r\n            fullDate\r\n        }\r\n    }\r\n\r\n    const getFormattedDate = (utcDate) => {\r\n        const dateArray = utcDate.split(' ')\r\n        return dateArray[0] + dateArray[1] + dateArray[2]\r\n    }\r\n\r\n    const onSearchPlaces = async (placeName) => {\r\n        if(placeName){\r\n            try{\r\n              const places = await getPlaceByName(placeName)\r\n              setPlaces((prevState) => (places))\r\n            }\r\n            catch(error){\r\n                console.log('error teste', error)\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    const getPlaceByName = (placeName) => {\r\n        return new Promise((resolve, reject) => {\r\n            Api.get(`/api/location/search/?query=${placeName}`)\r\n            .then(\r\n                (response) => {\r\n                    resolve(response.data)\r\n                },\r\n                (error) => {\r\n                    reject(error)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    const onClickPlace = (woeid) => {\r\n        startWeatherData(woeid)\r\n    }\r\n\r\n    const setSkeletons = () => {\r\n        setTodayWeather(prev => {\r\n            return {\r\n                ...prev,\r\n                temperature: {\r\n                    default:null,\r\n                    min: null,\r\n                    max: null\r\n                },\r\n                local: null,\r\n                situation: null,\r\n                date: {\r\n                    title: null,\r\n                    fullDate: null\r\n                },\r\n                imgUrl: null,\r\n                hightlights: {\r\n                    wind: null,\r\n                    humidity: null,\r\n                    airPressure: null,\r\n                    visibility: null\r\n                }\r\n            }\r\n        })\r\n        setWeathers([null,null,null,null,null])\r\n        setHightlights([null,null,null,null])\r\n    }\r\n\r\n    return (\r\n        <Box component=\"section\" className=\"home-container\" display=\"flex\" bgcolor=\"primary.dark\" color=\"primary.contrastText\">\r\n            <SideMenu weatherConfig = {todayWeather} onOpenSearchMenu={onOpenSearchMenu}></SideMenu>\r\n            <Box className=\"main-wrapper\" display=\"flex\" justifyContent=\"center\">\r\n                {\r\n                    !error ?\r\n                            <Box className=\"main-content\" pt={5} paddingBottom={5}>\r\n                                <Grid container className=\"cards-container\" spacing={2}>\r\n                                    {\r\n                                        weathers.map((weather, index) => {\r\n                                            return <Grid item xs={6} sm={6} md={6} lg={4}>\r\n                                                        {weather ? \r\n                                                            <WeatherCard key={index} weatherConfig = {weather}></WeatherCard>\r\n                                                            :\r\n                                                            <Skeleton height='100%' animation=\"wave\"/>\r\n                                                        }\r\n                                                    </Grid> \r\n                                        })\r\n                                    }\r\n                                </Grid>\r\n                                <Box className=\"cards-hightlights-container\" style={{width:\"100%\"}} display=\"flex\" flexDirection=\"column\" mt={3}>\r\n                                    <Box style={{width:'100%'}} mb={2}>\r\n                                        <Typography variant=\"h5\">\r\n                                            Today`s HightLights\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Grid container spacing={2}>\r\n                                        {\r\n                                            hightlights.map((hightlight, index) => {\r\n                                                return<Grid item xs={12} sm={12} md={12} lg={6}>\r\n                                                        {\r\n                                                            hightlight ?\r\n                                                            <HightlightCard hightlight = {hightlight} key={index} width=\"100%\" progress={hightlight.progress}></HightlightCard>\r\n                                                            :\r\n                                                            <Skeleton height=\"200px\" animation=\"wave\"/>\r\n                                                        }\r\n                                                        </Grid>\r\n                                            })\r\n                                        }\r\n                                    </Grid>\r\n                                </Box>\r\n                                <Box mt={12}>\r\n                                    <Typography variant=\"body1\" style={{textAlign:\"center\"}}>\r\n                                        Nathan Chacon @ DevChallenges.io\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Box>\r\n                :\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                        <img src={SadCloud}></img>\r\n                    </Box>\r\n                }\r\n\r\n            </Box>\r\n            <SearchMenu \r\n                open={isSearchMenuOpen} \r\n                onClose={onCloseSearchMenu} \r\n                onSearchPlaces = {onSearchPlaces} \r\n                places={places}\r\n                onClickPlace={onClickPlace}\r\n                >\r\n            </SearchMenu>\r\n        </Box> \r\n    )\r\n}\r\n\r\nexport default Home","import './App.css'\nimport Home from './views/Home/Home'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue'\nimport reportWebVitals from './reportWebVitals';\nconst theme = createMuiTheme({\n  palette:{\n    primary: blue,\n    secondary: {\n      main: '#01579b',\n    }\n  },\n  typography: {\n    \"fontFamily\": `\"Raleway\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}