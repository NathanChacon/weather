[{"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\index.js":"1","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\App.js":"2","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\reportWebVitals.js":"3","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\views\\home\\Home.js":"4","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\views\\Home\\Home.js":"5","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\SideMenu\\SideMenu.js":"6","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\utils\\api\\api.js":"7","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\WeatherCard\\WeatherCard.js":"8","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\HightlightCard\\HightlightCard.js":"9","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\SearchMenu\\SearchMenu.js":"10"},{"size":891,"mtime":1612148338686,"results":"11","hashOfConfig":"12"},{"size":317,"mtime":1612716433958,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":354,"mtime":1611359517868,"results":"15","hashOfConfig":"16"},{"size":12621,"mtime":1612656301863,"results":"17","hashOfConfig":"12"},{"size":3856,"mtime":1612654004586,"results":"18","hashOfConfig":"12"},{"size":172,"mtime":1611612677674,"results":"19","hashOfConfig":"12"},{"size":1198,"mtime":1611809339606,"results":"20","hashOfConfig":"12"},{"size":1313,"mtime":1612656626656,"results":"21","hashOfConfig":"12"},{"size":4574,"mtime":1612146142525,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"10bx8yh",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9utsay",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"25"},"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\index.js",[],["48","49"],"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\App.js",[],"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\reportWebVitals.js",[],"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\views\\home\\Home.js",[],"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\views\\Home\\Home.js",["50","51"],"import './Home.css'\r\nimport Box from '@material-ui/core/Box/Box'\r\nimport SideMenu from '../../components/SideMenu/SideMenu'\r\nimport SearchMenu from '../../components/SearchMenu/SearchMenu'\r\nimport WeatherCard from '../../components/WeatherCard/WeatherCard'\r\nimport HightlightCard from '../../components/HightlightCard/HightlightCard'\r\nimport { useEffect, useState } from 'react'\r\nimport Api from '../../utils/api/api'\r\nimport { Typography } from '@material-ui/core'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport SadCloud from '../../assets/imgs/Sad-Cloud.svg'\r\nfunction Home(){\r\n    const [todayWeather, setTodayWeather] = useState({\r\n        temperature: {\r\n            default:null,\r\n            min: null,\r\n            max: null\r\n        },\r\n        local: null,\r\n        situation: null,\r\n        date: {\r\n            title: null,\r\n            fullDate: null\r\n        },\r\n        imgUrl: null,\r\n        hightlights: {\r\n            wind: null,\r\n            humidity: null,\r\n            airPressure: null,\r\n            visibility: null\r\n        }\r\n    })\r\n    const [weathers, setWeathers] = useState([null,null,null,null,null])\r\n    const [hightlights, setHightlights] = useState([null,null,null,null])\r\n    const [isSearchMenuOpen, setIsSearchMenuOpen] = useState(false)\r\n    const [places, setPlaces] = useState([])\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setWeatherOfCurrentLocation()\r\n    },[])\r\n\r\n    const setWeatherOfCurrentLocation = async () => {\r\n        try{\r\n            const position = await getCurrentPosition()\r\n            const woeid = await getWoeid(position.coords.latitude, position.coords.longitude)\r\n            startWeatherData(woeid)\r\n            setError(false)\r\n        }\r\n        catch(error){\r\n            setError(true)\r\n        }   \r\n    }\r\n\r\n    const startWeatherData = async (woeid) => {\r\n        try{\r\n            setSkeletons()\r\n            const rawWeathers = await getWeathers(woeid)\r\n            const weathers = getFormattedWeathers(rawWeathers)\r\n            const todayWeatherAux = weathers.shift()\r\n            const hightlightsCardsConfig = getHightlightsCardsConfig(todayWeatherAux)\r\n\r\n            setTodayWeather((prevState) => ({...prevState, ...todayWeatherAux}))\r\n            setWeathers((prevState) => (weathers))\r\n            setHightlights((prevState) => (hightlightsCardsConfig))\r\n            setError(false)\r\n        }\r\n        catch(error){\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onOpenSearchMenu = () => {\r\n        setIsSearchMenuOpen(true)\r\n    }\r\n\r\n    const onCloseSearchMenu = () => {\r\n        setIsSearchMenuOpen(false)\r\n        setPlaces([])\r\n    }\r\n\r\n    const getWeathers = async (woeid) => {\r\n        const weatherRawData = await getWeatherInfoByWoid(woeid)\r\n        return weatherRawData\r\n    }\r\n\r\n    const getFormattedWeathers = (rawWeathers) => {\r\n        const formattedWeathers = []\r\n        rawWeathers.consolidated_weather.forEach(rawWeather => {\r\n            const img = `https://www.metaweather.com/static/img/weather/${rawWeather.weather_state_abbr}.svg`\r\n            const date = dateFactory('teste', getFormattedDate(new Date(rawWeather.applicable_date).toUTCString())) \r\n            const temperature = temperatureFactory(Math.floor(rawWeather.the_temp) + '°C', Math.floor(rawWeather.max_temp) + '°C',  Math.floor(rawWeather.min_temp) + '°C')\r\n            const hightlights = hightlightsFactory(Math.floor(rawWeather.wind_speed) + ' mph', {title: rawWeather.humidity + '%', progress: rawWeather.humidity}, Math.floor(rawWeather.air_pressure) + ' mb', Math.floor(rawWeather.visibility) + ' miles')\r\n\r\n            const weather = weatherFactory(\r\n                temperature, \r\n                rawWeathers.title, \r\n                rawWeather.weather_state_name, \r\n                date, \r\n                img,\r\n                hightlights\r\n            )\r\n           formattedWeathers.push(weather)\r\n        })\r\n\r\n        return formattedWeathers\r\n    }\r\n\r\n    const getCurrentPosition = () => {\r\n        return new Promise((resolve, reject) => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        resolve(position)\r\n                    },\r\n                    (error) => {\r\n                        reject(\"Cannot get position\")\r\n                    }\r\n                )\r\n            } \r\n            else {\r\n                reject(\"Cannot get position\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const getWoeid = (lat, long) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const response = await Api.get(`location/search/?lattlong=${lat},${long}`)\r\n                const woeid = response.data[0].woeid\r\n                resolve(woeid)\r\n            }\r\n            catch(error){\r\n                reject(\"Cannot get woid\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const getWeatherInfoByWoid = (woid) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            try{\r\n                const response = await Api.get(`location/${woid}`)\r\n                resolve(response.data)\r\n            }\r\n            catch(error){\r\n                reject(\"Cannot get location weather info\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const getHightlightsCardsConfig = (todayWeather) => {\r\n        console.log(\"testee\", todayWeather)\r\n        return [\r\n            {\r\n                header:'Wind status',\r\n                progress: null,\r\n                title: todayWeather.hightlights.wind\r\n            },\r\n            {\r\n                header:'Humidity',\r\n                progress: {\r\n                    value: todayWeather.hightlights.humidity.progress\r\n                },\r\n                title: todayWeather.hightlights.humidity.title\r\n            },\r\n            {\r\n                header:'Visibility',\r\n                progress: null,\r\n                title: todayWeather.hightlights.visibility\r\n            },\r\n            {   \r\n                header: 'Air pressure',\r\n                progress: null,\r\n                title: todayWeather.hightlights.airPressure\r\n            }\r\n        ]\r\n    }\r\n\r\n    const weatherFactory = (temperature, local, situation, date, imgUrl, hightlights) => {\r\n        return {\r\n            temperature,\r\n            local,\r\n            situation,\r\n            date,\r\n            imgUrl,\r\n            hightlights\r\n        }\r\n    }\r\n\r\n    const temperatureFactory = (defaultTemp, max, min) => {\r\n        return {\r\n            default: defaultTemp,\r\n            max,\r\n            min\r\n        }\r\n    }\r\n\r\n    const hightlightsFactory = (wind, humidity, airPressure, visibility) => {\r\n        return {\r\n            wind,\r\n            humidity,\r\n            airPressure,\r\n            visibility\r\n        }\r\n    }\r\n\r\n    const dateFactory = (title, fullDate) => {\r\n        return {\r\n            title,\r\n            fullDate\r\n        }\r\n    }\r\n\r\n    const getFormattedDate = (utcDate) => {\r\n        const dateArray = utcDate.split(' ')\r\n        return dateArray[0] + dateArray[1] + dateArray[2]\r\n    }\r\n\r\n    const onSearchPlaces = async (placeName) => {\r\n        if(placeName){\r\n            try{\r\n              const places = await getPlaceByName(placeName)\r\n              setPlaces((prevState) => (places))\r\n            }\r\n            catch(error){\r\n                console.log('error teste', error)\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    const getPlaceByName = (placeName) => {\r\n        return new Promise((resolve, reject) => {\r\n            Api.get(`/api/location/search/?query=${placeName}`)\r\n            .then(\r\n                (response) => {\r\n                    resolve(response.data)\r\n                },\r\n                (error) => {\r\n                    reject(error)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    const onClickPlace = (woeid) => {\r\n        startWeatherData(woeid)\r\n    }\r\n\r\n    const setSkeletons = () => {\r\n        setTodayWeather(prev => {\r\n            return {\r\n                ...prev,\r\n                temperature: {\r\n                    default:null,\r\n                    min: null,\r\n                    max: null\r\n                },\r\n                local: null,\r\n                situation: null,\r\n                date: {\r\n                    title: null,\r\n                    fullDate: null\r\n                },\r\n                imgUrl: null,\r\n                hightlights: {\r\n                    wind: null,\r\n                    humidity: null,\r\n                    airPressure: null,\r\n                    visibility: null\r\n                }\r\n            }\r\n        })\r\n        setWeathers([null,null,null,null,null])\r\n        setHightlights([null,null,null,null])\r\n    }\r\n\r\n    return (\r\n        <Box component=\"section\" className=\"home-container\" display=\"flex\" bgcolor=\"primary.dark\" color=\"primary.contrastText\">\r\n            <SideMenu weatherConfig = {todayWeather} onOpenSearchMenu={onOpenSearchMenu}></SideMenu>\r\n            <Box className=\"main-wrapper\" display=\"flex\" justifyContent=\"center\">\r\n                {\r\n                    !error ?\r\n                            <Box className=\"main-content\" pt={5} paddingBottom={5}>\r\n                                <Grid container className=\"cards-container\" spacing={2}>\r\n                                    {\r\n                                        weathers.map((weather, index) => {\r\n                                            return <Grid item xs={6} sm={6} md={6} lg={4}>\r\n                                                        {weather ? \r\n                                                            <WeatherCard key={index} weatherConfig = {weather}></WeatherCard>\r\n                                                            :\r\n                                                            <Skeleton height='100%' animation=\"wave\"/>\r\n                                                        }\r\n                                                    </Grid> \r\n                                        })\r\n                                    }\r\n                                </Grid>\r\n                                <Box className=\"cards-hightlights-container\" style={{width:\"100%\"}} display=\"flex\" flexDirection=\"column\" mt={3}>\r\n                                    <Box style={{width:'100%'}} mb={2}>\r\n                                        <Typography variant=\"h5\">\r\n                                            Today`s HightLights\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Grid container spacing={2}>\r\n                                        {\r\n                                            hightlights.map((hightlight, index) => {\r\n                                                return<Grid item xs={12} sm={12} md={12} lg={6}>\r\n                                                        {\r\n                                                            hightlight ?\r\n                                                            <HightlightCard hightlight = {hightlight} key={index} width=\"100%\" progress={hightlight.progress}></HightlightCard>\r\n                                                            :\r\n                                                            <Skeleton height=\"200px\" animation=\"wave\"/>\r\n                                                        }\r\n                                                        </Grid>\r\n                                            })\r\n                                        }\r\n                                    </Grid>\r\n                                </Box>\r\n                                <Box mt={12}>\r\n                                    <Typography variant=\"body1\" style={{textAlign:\"center\"}}>\r\n                                        Nathan Chacon @ DevChallenges.io\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Box>\r\n                :\r\n                    <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                        <img src={SadCloud}></img>\r\n                    </Box>\r\n                }\r\n\r\n            </Box>\r\n            <SearchMenu \r\n                open={isSearchMenuOpen} \r\n                onClose={onCloseSearchMenu} \r\n                onSearchPlaces = {onSearchPlaces} \r\n                places={places}\r\n                onClickPlace={onClickPlace}\r\n                >\r\n            </SearchMenu>\r\n        </Box> \r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\SideMenu\\SideMenu.js",["52","53"],"import Box from '@material-ui/core/Box/Box'\r\nimport Button from '@material-ui/core/Button/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useState, useEffect} from 'react'\r\nimport PlaceIcon from '@material-ui/icons/Place';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport './SideMenu.css'\r\nfunction SideMenu(props){\r\n    const [weatherConfig, setWeatherConfig] = useState(props.weatherConfig)\r\n    useEffect(() => {\r\n        setWeatherConfig(props.weatherConfig)\r\n    }, [props])\r\n    \r\n    const onOpenSearchMenu = () => {\r\n        props.onOpenSearchMenu()\r\n    }\r\n\r\n    return (\r\n        <Box className=\"side-menu-container\" component=\"div\" bgcolor=\"primary.light\" color=\"primary.contrastText\" display=\"flex\" justifyContent=\"space-between\" flexDirection=\"column\">\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                <Box className=\"actions-container\" display=\"flex\" justifyContent=\"space-between\" p={3} pt={2}>\r\n                    <Button variant=\"contained\"  color=\"primary\" onClick={() => {onOpenSearchMenu()}}>\r\n                        <Typography variant=\"button\">\r\n                            Search for places\r\n                        </Typography>\r\n                    </Button>\r\n                </Box>\r\n                <Box className=\"clouds-container\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n                    {\r\n                        weatherConfig.imgUrl ?\r\n                        <img className=\"cloud-img\" src={weatherConfig.imgUrl}></img>\r\n                        :\r\n                        <Skeleton variant=\"rect\" width='250px' height='250px' animation=\"wave\"/>\r\n                    }\r\n                </Box>\r\n                <Box style={{width:'80%'}} mt={15}>\r\n                    <Typography variant=\"h1\" component=\"h2\" style={{width:'100%'}}>\r\n                        {weatherConfig.temperature.default ? \r\n                            weatherConfig.temperature.default\r\n                            :\r\n                            <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\" />    \r\n                        }\r\n                    </Typography>\r\n                </Box>\r\n                <Box style={{width:'80%'}} mt={15}>\r\n                    <Typography variant=\"h4\" component=\"h4\" style={{width:'100%'}}>\r\n                        {\r\n                            weatherConfig.situation ? \r\n                            weatherConfig.situation\r\n                            :\r\n                            <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\"></Skeleton>\r\n                        }\r\n                    </Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box display=\"flex\" alignItems=\"center\" flexDirection=\"column\" mt={2}>\r\n                <Box className=\"date-container\" style={{width:'80%'}}>\r\n                    <Typography variant=\"body2\" style={{width:'100%'}}>\r\n                        {\r\n                            weatherConfig.date.title && weatherConfig.date.fullDate ?\r\n                            'today' + ' . ' + weatherConfig.date.fullDate\r\n                            :\r\n                            <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\"></Skeleton>\r\n                        }\r\n                    </Typography>\r\n                </Box>\r\n                <Box style={{width: '80%'}} mt={1}>\r\n                {\r\n                    weatherConfig.local ?\r\n                    <Typography variant=\"body2\" style={{width: '100%'}}>\r\n                    <PlaceIcon></PlaceIcon>{weatherConfig.local}\r\n                    </Typography>\r\n                    :\r\n                    <Skeleton width=\"100%\" variant=\"text\" animation=\"wave\"></Skeleton>\r\n                }\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SideMenu","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\utils\\api\\api.js",[],"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\WeatherCard\\WeatherCard.js",["54"],"import './WeatherCard.css'\r\nimport Box from '@material-ui/core/Box/Box'\r\nimport Typography from '@material-ui/core/Typography/Typography'\r\nimport { useState, useEffect} from 'react'\r\n\r\nfunction WeatherCard(props){\r\n    const [weatherConfig, setWeatherConfig] = useState(props.weatherConfig)\r\n\r\n    useEffect(() => {\r\n        setWeatherConfig(props.weatherConfig)\r\n    }, [props])\r\n\r\n    return (\r\n        <Box className=\"weather-card\" bgcolor=\"primary.light\">\r\n            <Typography variant=\"body1\" style={{textAlign:\"center\"}}>\r\n               {weatherConfig.date.fullDate}\r\n            </Typography>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" className=\"weather-image\">\r\n                <img src={weatherConfig.imgUrl}></img>\r\n            </Box>\r\n            <Box display=\"flex\" justifyContent=\"space-between\" pr={1} pl={1}>\r\n                <Typography variant=\"body2\">\r\n                    {weatherConfig.temperature.min}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                    {weatherConfig.temperature.max}\r\n                </Typography>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default WeatherCard","C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\HightlightCard\\HightlightCard.js",[],"C:\\Users\\Nathan\\Desktop\\personalProjects\\challenge\\weather\\weather-app\\src\\components\\SearchMenu\\SearchMenu.js",["55"],"import Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport {useEffect, useState} from 'react'\r\nimport Button from '@material-ui/core/Button/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport './SearchMenu.css'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    cssLabel: {\r\n        color : 'white'\r\n    },  \r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n          borderColor: `white !important`\r\n        },\r\n        color:'white !important'\r\n    },\r\n    cssFocused: {\r\n        color:'white !important'\r\n    },\r\n    notchedOutline: {\r\n        borderWidth: '1px',\r\n        borderColor: 'white !important',\r\n    },\r\n  }));\r\n\r\nfunction SearchMenu(props){\r\n    const [open, setOpen] = useState(props.open)\r\n    const classes = useStyles();\r\n    const [place, setPlace] = useState('')\r\n    const [places, setPlaces] = useState(props.places)\r\n\r\n    useEffect(() => {\r\n        setOpen(props.open)\r\n        setPlaces(props.places)\r\n    }, [props])\r\n\r\n    const onClose = () => {\r\n        setPlace('')\r\n        props.onClose()\r\n    }\r\n\r\n    const onSearchPlaces = () => {\r\n        props.onSearchPlaces(place)\r\n    }\r\n\r\n    const onClickPlace = (woeid) => {\r\n        props.onClickPlace(woeid)\r\n        onClose()\r\n    }   \r\n    \r\n    const handleInputChange = (event) =>{\r\n        setPlace(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <Drawer anchor='left' open={props.open} onClose={onClose}>\r\n            <Box className=\"search-menu-container\" style={{overflow:'auto'}} bgcolor=\"primary.dark\" pl={1} pr={1} color=\"primary.contrastText\"  display=\"flex\" flexDirection=\"column\" >\r\n                <Box display=\"flex\" justifyContent=\"flex-end\" mt={1}>\r\n                    <Button classes = {{root: classes.cssLabel}} onClick={() => {onClose()}}>\r\n                        <CloseIcon></CloseIcon>\r\n                    </Button>\r\n                </Box>\r\n                <Box display=\"flex\" justifyContent=\"space-between\" pt={2}>\r\n                    <TextField\r\n                        label=\"search location\"\r\n                        id=\"outlined-start-adornment\"\r\n                        value={place}\r\n                        onChange={handleInputChange}\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\"><SearchIcon></SearchIcon></InputAdornment>,\r\n                            classes: {\r\n                                root: classes.cssOutlinedInput,\r\n                                focused: classes.cssFocused,\r\n                                notchedOutline: classes.notchedOutline\r\n                            },\r\n                        }}\r\n                        InputLabelProps={{\r\n                            classes: {\r\n                              root: classes.cssLabel,\r\n                              focused: classes.cssFocused,\r\n                            },\r\n                        }}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <Button variant=\"contained\"  color=\"primary\" onClick={onSearchPlaces}>\r\n                        <Typography variant=\"button\">\r\n                                Search\r\n                        </Typography>\r\n                    </Button>\r\n                </Box>\r\n                <List>\r\n                    {\r\n                        places.map((place, index) => {\r\n                            return <ListItem button={true} key={index} onClick={() => {onClickPlace(place.woeid)}}>\r\n                                        <ListItemText primary={place.title}></ListItemText>\r\n                                        <ListItemIcon className={classes.cssLabel}>\r\n                                            <ArrowRightIcon/>\r\n                                        </ListItemIcon>\r\n                                    </ListItem>\r\n                        })\r\n                    }\r\n                </List>\r\n           </Box>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default SearchMenu",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":42,"column":7,"nodeType":"62","endLine":42,"endColumn":9,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":329,"column":25,"nodeType":"66","endLine":329,"endColumn":45},{"ruleId":"64","severity":1,"message":"65","line":31,"column":25,"nodeType":"66","endLine":31,"endColumn":79},{"ruleId":"67","severity":1,"message":"68","line":61,"column":37,"nodeType":"69","messageId":"70","endLine":61,"endColumn":38},{"ruleId":"64","severity":1,"message":"65","line":19,"column":17,"nodeType":"66","endLine":19,"endColumn":49},{"ruleId":"71","severity":1,"message":"72","line":38,"column":12,"nodeType":"73","messageId":"74","endLine":38,"endColumn":16},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setWeatherOfCurrentLocation'. Either include it or remove the dependency array.","ArrayExpression",["77"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'open' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},"Update the dependencies array to be: [setWeatherOfCurrentLocation]",{"range":"80","text":"81"},[1496,1498],"[setWeatherOfCurrentLocation]"]